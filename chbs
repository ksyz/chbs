#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long  qw(:config no_ignore_case bundling);
use lib 'lib';
use Acme::CHBS;

sub help {
	return <<HELP;
cbhs [ OPTIONS ]
OPTIONS:
-w,--words INT
	Number of words (default 6)
-S,--symbols
	Don't skip dictionary words with symbols and numbers (default false)
-m,--minimum INT
	Minimum word length (default 4)
-M,--maximum INT
	Maximum word length (default 8)
-d,--dictionary FILE
	Dictionary file (default /usr/share/dict/words)
-c,--count INT
	Number of generated sets, one per line (default one), INT<0 for infinite.
-C,capitalize-first
	Capitalize first letter (default false)
-l,--min-length INT
	Minimum passphrase length (default 1)
-L,--max-length INT
	Maximum passphrase length (default 32)
-s,--separator CHAR|STRING
	Character, used as word separator (default: ' '). If several unique 
	characters are provided, only first is used, unless random selection 
	is requested for each word gap.
-R,--random-separator
	Select random character from separator list.
HELP
};


my %c = ( count => 1, );
my $options = GetOptions(
	'w|words=i' => \$c{words},
	'S|symbols' => \$c{symbols},
	'm|min=i' => \$c{min_length},
	'M|max=i' => \$c{max_length},
	'd|dictionary=s' => \$c{dict},
	'c|count=i' => \$c{count},
	'h|help' => \$c{help},
	'C|capitalize-first' => \$c{capitalize_first},
	'l|min-length=i' => \$c{passphrase_min_length},
	'L|max-length=i' => \$c{passphrase_max_length},
	'R|random-separator!' => \$c{random_separator},
	's|separator=s' => \$c{separator},
);

exit 1
	unless ($options);

if ($c{help}) {
	print help;
	exit 0;
}

local $\ = "\n";
my $chbs = Acme::CHBS->new(map { $_ => $c{$_} } grep { defined $c{$_} } keys %c);
for (;$c{count};$c{count}--) {
	print $chbs->shuffle;
}

1;
